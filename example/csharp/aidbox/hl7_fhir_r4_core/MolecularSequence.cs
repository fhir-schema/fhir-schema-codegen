// WARNING: This file is autogenerated by FHIR Schema Codegen.
// https://github.com/fhir-schema/fhir-schema-codegen
// Any manual changes made to this file may be overwritten.

using System.ComponentModel;

namespace Aidbox.FHIR.R4.Core;

public class MolecularSequence : DomainResource
{
    public ResourceReference? Patient { get; set; }
    public MolecularSequenceStructureVariant[]? StructureVariant { get; set; }
    public MolecularSequenceRepository[]? Repository { get; set; }
    public MolecularSequenceVariant[]? Variant { get; set; }
    public ResourceReference? Specimen { get; set; }
    public TypeEnum? Type { get; set; }
    public ResourceReference[]? Pointer { get; set; }
    public string? ObservedSeq { get; set; }
    public Identifier[]? Identifier { get; set; }
    public MolecularSequenceQuality[]? Quality { get; set; }
    public ResourceReference? Device { get; set; }
    public Quantity? Quantity { get; set; }
    public required int CoordinateSystem { get; set; }
    public MolecularSequenceReferenceSeq? ReferenceSeq { get; set; }
    public ResourceReference? Performer { get; set; }
    public int? ReadCoverage { get; set; }
    
    public class MolecularSequenceQuality : BackboneElement
    {
        public decimal? TruthTP { get; set; }
        public decimal? FScore { get; set; }
        public decimal? TruthFN { get; set; }
        public decimal? QueryFP { get; set; }
        public CodeableConcept? Method { get; set; }
        public decimal? Precision { get; set; }
        public int? Start { get; set; }
        public decimal? QueryTP { get; set; }
        public required TypeEnum Type { get; set; }
        public decimal? Recall { get; set; }
        public MolecularSequenceQualityRoc? Roc { get; set; }
        public Quantity? Score { get; set; }
        public int? End { get; set; }
        public CodeableConcept? StandardSequence { get; set; }
        public decimal? GtFP { get; set; }
        
        public enum TypeEnum
        {
            [Description("indel")]
            Indel ,
            [Description("snp")]
            Snp ,
            [Description("unknown")]
            Unknown ,
        }
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class MolecularSequenceQualityRoc : BackboneElement
    {
        public int[]? Score { get; set; }
        public int[]? NumTP { get; set; }
        public int[]? NumFP { get; set; }
        public int[]? NumFN { get; set; }
        public decimal[]? Precision { get; set; }
        public decimal[]? Sensitivity { get; set; }
        public decimal[]? FMeasure { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class MolecularSequenceReferenceSeq : BackboneElement
    {
        public CodeableConcept? Chromosome { get; set; }
        public CodeableConcept? ReferenceSeqId { get; set; }
        public int? WindowEnd { get; set; }
        public StrandEnum? Strand { get; set; }
        public string? GenomeBuild { get; set; }
        public OrientationEnum? Orientation { get; set; }
        public ResourceReference? ReferenceSeqPointer { get; set; }
        public string? ReferenceSeqString { get; set; }
        public int? WindowStart { get; set; }
        
        public enum StrandEnum
        {
            [Description("watson")]
            Watson ,
            [Description("crick")]
            Crick ,
        }
        public enum OrientationEnum
        {
            [Description("sense")]
            Sense ,
            [Description("antisense")]
            Antisense ,
        }
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class MolecularSequenceRepository : BackboneElement
    {
        public required TypeEnum Type { get; set; }
        public string? Url { get; set; }
        public string? Name { get; set; }
        public string? DatasetId { get; set; }
        public string? VariantsetId { get; set; }
        public string? ReadsetId { get; set; }
        
        public enum TypeEnum
        {
            [Description("directlink")]
            Directlink ,
            [Description("openapi")]
            Openapi ,
            [Description("login")]
            Login ,
            [Description("oauth")]
            Oauth ,
            [Description("other")]
            Other ,
        }
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class MolecularSequenceStructureVariant : BackboneElement
    {
        public CodeableConcept? VariantType { get; set; }
        public bool? Exact { get; set; }
        public int? Length { get; set; }
        public MolecularSequenceStructureVariantOuter? Outer { get; set; }
        public MolecularSequenceStructureVariantInner? Inner { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class MolecularSequenceStructureVariantInner : BackboneElement
    {
        public int? Start { get; set; }
        public int? End { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class MolecularSequenceStructureVariantOuter : BackboneElement
    {
        public int? Start { get; set; }
        public int? End { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class MolecularSequenceVariant : BackboneElement
    {
        public int? Start { get; set; }
        public int? End { get; set; }
        public string? ObservedAllele { get; set; }
        public string? ReferenceAllele { get; set; }
        public string? Cigar { get; set; }
        public ResourceReference? VariantPointer { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    
    public enum TypeEnum
    {
        [Description("aa")]
        Aa ,
        [Description("dna")]
        Dna ,
        [Description("rna")]
        Rna ,
    }
    public override string ToString() => 
        JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
    
}

