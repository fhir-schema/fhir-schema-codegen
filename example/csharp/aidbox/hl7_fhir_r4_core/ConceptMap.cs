// WARNING: This file is autogenerated by FHIR Schema Codegen.
// https://github.com/fhir-schema/fhir-schema-codegen
// Any manual changes made to this file may be overwritten.

using System.ComponentModel;

namespace Aidbox.FHIR.R4.Core;

public class ConceptMap : DomainResource
{
    public string? Description { get; set; }
    public string? SourceCanonical { get; set; }
    public string? Date { get; set; }
    public string? TargetUri { get; set; }
    public ConceptMapGroup[]? Group { get; set; }
    public string? Publisher { get; set; }
    public CodeableConcept[]? Jurisdiction { get; set; }
    public string? Purpose { get; set; }
    public string? Name { get; set; }
    public UsageContext[]? UseContext { get; set; }
    public string? Copyright { get; set; }
    public bool? Experimental { get; set; }
    public string? Title { get; set; }
    public string? TargetCanonical { get; set; }
    public required StatusEnum Status { get; set; }
    public string? SourceUri { get; set; }
    public string? Url { get; set; }
    public Identifier? Identifier { get; set; }
    public string? Version { get; set; }
    public ContactDetail[]? Contact { get; set; }
    
    public class ConceptMapGroup : BackboneElement
    {
        public string? Source { get; set; }
        public string? SourceVersion { get; set; }
        public string? Target { get; set; }
        public string? TargetVersion { get; set; }
        public required ConceptMapGroupElement[] Element { get; set; }
        public ConceptMapGroupUnmapped? Unmapped { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class ConceptMapGroupElement : BackboneElement
    {
        public string? Code { get; set; }
        public string? Display { get; set; }
        public ConceptMapGroupElementTarget[]? Target { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class ConceptMapGroupElementTarget : BackboneElement
    {
        public string? Code { get; set; }
        public string? Display { get; set; }
        public required EquivalenceEnum Equivalence { get; set; }
        public string? Comment { get; set; }
        public ConceptMapGroupElementTargetDependsOn[]? DependsOn { get; set; }
        public ConceptMapGroupElementTargetDependsOn[]? Product { get; set; }
        
        public enum EquivalenceEnum
        {
            [Description("relatedto")]
            Relatedto ,
            [Description("unmatched")]
            Unmatched ,
            [Description("equivalent")]
            Equivalent ,
            [Description("wider")]
            Wider ,
            [Description("subsumes")]
            Subsumes ,
            [Description("narrower")]
            Narrower ,
            [Description("specializes")]
            Specializes ,
            [Description("inexact")]
            Inexact ,
            [Description("equal")]
            Equal ,
            [Description("disjoint")]
            Disjoint ,
        }
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class ConceptMapGroupElementTargetDependsOn : BackboneElement
    {
        public required string Property { get; set; }
        public string? System { get; set; }
        public required string Value { get; set; }
        public string? Display { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class ConceptMapGroupUnmapped : BackboneElement
    {
        public required ModeEnum Mode { get; set; }
        public string? Code { get; set; }
        public string? Display { get; set; }
        public string? Url { get; set; }
        
        public enum ModeEnum
        {
            [Description("provided")]
            Provided ,
            [Description("fixed")]
            Fixed ,
            [Description("other-map")]
            OtherDashMap ,
        }
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    
    public enum StatusEnum
    {
        [Description("draft")]
        Draft ,
        [Description("active")]
        Active ,
        [Description("retired")]
        Retired ,
        [Description("unknown")]
        Unknown ,
    }
    public override string ToString() => 
        JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
    
}

