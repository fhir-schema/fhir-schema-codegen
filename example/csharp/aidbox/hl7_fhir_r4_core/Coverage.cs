// WARNING: This file is autogenerated by FHIR Schema Codegen.
// https://github.com/fhir-schema/fhir-schema-codegen
// Any manual changes made to this file may be overwritten.

namespace Aidbox.FHIR.R4.Core;

public class Coverage : DomainResource
{
    public ResourceReference? PolicyHolder { get; set; }
    public required ResourceReference Beneficiary { get; set; }
    public ResourceReference[]? Contract { get; set; }
    public CodeableConcept? Relationship { get; set; }
    public CodeableConcept? Type { get; set; }
    public CoverageCostToBeneficiary[]? CostToBeneficiary { get; set; }
    public bool? Subrogation { get; set; }
    public ResourceReference? Subscriber { get; set; }
    public required ResourceReference[] Payor { get; set; }
    public required StatusEnum Status { get; set; }
    public CoverageClass[]? Class { get; set; }
    public Identifier[]? Identifier { get; set; }
    public long? Order { get; set; }
    public string? Network { get; set; }
    public Period? Period { get; set; }
    public string? Dependent { get; set; }
    public string? SubscriberId { get; set; }
    
    public class CoverageClass : BackboneElement
    {
        public required CodeableConcept Type { get; set; }
        public required string Value { get; set; }
        public string? Name { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class CoverageCostToBeneficiary : BackboneElement
    {
        public CodeableConcept? Type { get; set; }
        public Quantity? ValueQuantity { get; set; }
        public Money? ValueMoney { get; set; }
        public CoverageCostToBeneficiaryException[]? Exception { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    public class CoverageCostToBeneficiaryException : BackboneElement
    {
        public required CodeableConcept Type { get; set; }
        public Period? Period { get; set; }
        
        public override string ToString() => 
            JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
        
    }
    
    
    public enum StatusEnum
    {
        Active ,
        Cancelled ,
        Draft ,
        EnteredDashInDashError ,
    }
    public override string ToString() => 
        JsonSerializer.Serialize(this, Aidbox.Config.JsonSerializerOptions);
    
}

